generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  roles     Role[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  carts     Cart[]
  addresses Address[]
  orders    Order[]
}

model Product {
  id                Int               @id @default(autoincrement())
  title             String
  description       String
  price             Float
  stock             Int               @default(1)
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  images            ProductImage[]
  productCategories ProductCategory[]
  cartItems         CartItem[]
  orderItems        OrderItem[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  main      Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String
  idName            String            @unique
  level             Int               @default(1) // 1: nivel superior, 2: nivel medio, 3: nivel inferior
  parentId          Int? // Referencia al ID de la categoría padre
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  productCategories ProductCategory[]

  @@index([parentId])
  @@index([level])
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
}

model Cart {
  id           String       @id @default(uuid())
  sessionId    String? // Para usuarios anónimos
  userId       String? // Para usuarios registrados
  user         User?        @relation(fields: [userId], references: [id])
  items        CartItem[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  address      Address?     @relation(fields: [addressId], references: [id])
  addressId    String? // Dirección opcional para el envío
  deliveryType DeliveryType // Tipo de entrega (envío o retiro)
  total        Float        @default(0) // Total del carrito

  @@index([sessionId])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  subTotal  Float    @default(0) // Subtotal del item (precio * cantidad)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
}

model Address {
  id        String   @id @default(uuid())
  street    String
  number    String
  city      String
  state     String
  zipCode   String
  country   String   @default("España")
  userId    String? // Puede pertenecer a un usuario o no
  user      User?    @relation(fields: [userId], references: [id])
  carts     Cart[] // Relación con carritos que usan esta dirección
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String      @id @default(uuid())
  userId       String?
  user         User?       @relation(fields: [userId], references: [id])
  addressId    String?
  address      Address?    @relation(fields: [addressId], references: [id])
  email        String
  name         String
  phone        String?
  total        Float
  status       OrderStatus @default(PENDING)
  deliveryType DeliveryType
  sessionId    String?
  notes        String?
  items        OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([userId])
  @@index([sessionId])
  @@index([status])
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  title     String
  price     Float
  quantity  Int
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

enum DeliveryType {
  SHIPPING // Envío a domicilio
  PICKUP // Retirar en tienda
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  CUSTOM
  PRODUCTOR
}
