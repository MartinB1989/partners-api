generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String
  name            String
  roles           Role[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  addresses       Address[]
  carts           Cart[]
  orders          Order[]
  pickupAddresses PickupAddress[]
  products        Product[]
}

model Product {
  id                Int               @id @default(autoincrement())
  title             String
  description       String
  price             Float
  stock             Int               @default(1)
  active            Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  cartItems         CartItem[]
  orderItems        OrderItem[]
  user              User              @relation(fields: [userId], references: [id])
  productCategories ProductCategory[]
  images            ProductImage[]
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  main      Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  key       String
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id                Int               @id @default(autoincrement())
  name              String
  idName            String            @unique
  level             Int               @default(1)
  parentId          Int?
  parent            Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[]        @relation("CategoryHierarchy")
  productCategories ProductCategory[]

  @@index([parentId])
  @@index([level])
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
}

model Cart {
  id           String       @id @default(uuid())
  sessionId    String?
  userId       String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  addressId    String?
  deliveryType DeliveryType
  total        Float        @default(0)
  address      Address?     @relation(fields: [addressId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])
  items        CartItem[]

  @@index([sessionId])
  @@index([userId])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId Int
  quantity  Int
  subTotal  Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Address {
  id        String   @id @default(uuid())
  street    String
  number    String
  city      String
  state     String
  zipCode   String
  country   String   @default("Argentina")
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  carts     Cart[]
  orders    Order[]
}

model Order {
  id           Int          @id @default(autoincrement())
  userId       String?
  addressId    String?
  email        String
  name         String
  phone        String?
  total        Float
  status       OrderStatus  @default(PENDING_PAYMENT)
  deliveryType DeliveryType
  sessionId    String?
  notes        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  address      Address?     @relation(fields: [addressId], references: [id])
  user         User?        @relation(fields: [userId], references: [id])
  items        OrderItem[]

  @@index([userId])
  @@index([sessionId])
  @@index([status])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  title     String
  unitPrice Float
  subTotal  Float
  quantity  Int
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model PickupAddress {
  id             Int      @id @default(autoincrement())
  name           String
  street         String
  number         String
  city           String
  state          String
  zipCode        String
  country        String   @default("Argentina")
  additionalInfo String?
  latitude       Float?
  longitude      Float?
  isActive       Boolean  @default(true)
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum DeliveryType {
  SHIPPING
  PICKUP
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  CUSTOM
  PRODUCTOR
}
